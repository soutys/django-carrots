#
msgid ""
msgstr ""
"Project-Id-Version: Code Carrots 2.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-19 23:29+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/python_import.rst:2
msgid "Multiple Files"
msgstr ""

#: ../../source/python_import.rst:4
msgid ""
"Up to this point we have written all of our programs in one file. This is "
"perfectly fine as long as the file is not much longer than 100 lines. As the"
" file gets bigger is getting more and more difficult to find something in "
"it. That's why it is a good practice to keep the program files smaller, but "
"obviously not all (or even most) the programs can fit into one file that "
"small. Python solves this problem using :keyword:`import` keyword."
msgstr ""

#: ../../source/python_import.rst:12
msgid "Imports"
msgstr ""

#: ../../source/python_import.rst:14
msgid "Lets get back for a second to our xmas tree example::"
msgstr ""

#: ../../source/python_import.rst:28
msgid ""
"This program is not yet to big, but lets try to split it into smaller files."
" First create new file ``tree_utils.py`` and move the first two functions to"
" that file, so it looks like this::"
msgstr ""

#: ../../source/python_import.rst:40
msgid ""
"Now lets create another file ``tree_main.py`` (in the same directory, this "
"is important) with the following contents::"
msgstr ""

#: ../../source/python_import.rst:49
msgid ""
"Here we can see how :keyword:``import`` keyword is used. It allows us to use"
" functions and objects from other files. After the keyword we provide the "
"name of file without ``.py`` extension, this is called the module name. When"
" using imported function we need to provide module name and function name "
"separated by dot, just like we did with objects. In this example "
"``tree_utils`` is a module name. Thanks to this we have access to all the "
"functions and objects from ``tree_utils`` module."
msgstr ""

#: ../../source/python_import.rst:57
msgid "Import from"
msgstr ""

#: ../../source/python_import.rst:59
msgid ""
":keyword:``import`` keyword has also another form: ``from module import "
"function``. When we rewrite ``tree_main.py`` example to use this form it "
"will look like this::"
msgstr ""

#: ../../source/python_import.rst:68
msgid ""
"This way we can call ``print_tree`` function as in the original program (as "
"if it was defined in the same file). Now it is easier to call this function,"
" but we have access to only this function."
msgstr ""

#: ../../source/python_import.rst:72
msgid "We can also access both ``tree_utils`` function by writing::"
msgstr ""

#: ../../source/python_import.rst:76
msgid ""
"This way we can import as many functions or objects from a module as we "
"want. To make the code shorter we can also write::"
msgstr ""

#: ../../source/python_import.rst:81
msgid ""
"This will import all functions and objects from ``tree_utils`` module, but "
"this solutions discouraged, as it is difficult to see what was actually "
"imported."
msgstr ""

#: ../../source/python_import.rst:85
msgid "Batteries included"
msgstr ""

#: ../../source/python_import.rst:87
msgid ""
"Python has a `batteries included` philosophy. This means that Python comes "
"with many modules that can be used by developers. This way we can "
"concentrate on writing our programs instead of solving all the basic "
"problems that have been already solved."
msgstr ""

#: ../../source/python_import.rst:91
msgid ""
"For the list of modules available with Python check python `documentation`_."
" As you can see there are a lot of them. They allow as to deal with system "
"services, math, date and time and many more."
msgstr ""

#: ../../source/python_import.rst:98
msgid "Lottery"
msgstr ""

#: ../../source/python_import.rst:100
msgid ""
"One of the interesting modules included with Python is ``random`` module. It"
" allows us to generate random number (real or integer), select random "
"element from a list and many other. Documentation for this module can be "
"found `here`_. When you read it, you will notice it says `pseudo-random "
"number generators`. That's just because these are not really random numbers,"
" they only look like this, but this is good enough for our purpose."
msgstr ""

#: ../../source/python_import.rst:107
msgid ""
"So now we can create a lottery. For we have to import ``random`` module and "
"use :func:`randrange` function::"
msgstr ""

#: ../../source/python_import.rst:115
msgid "Save it to a file ``lottery.py``."
msgstr ""

#: ../../source/python_import.rst:117
msgid ""
":keyword:`import` keyword allows us to use not only files created by us, but"
" also included with Python. That is why we can write ``import random`` even "
"though there is no ``random.py`` file in the same directory."
msgstr ""

#: ../../source/python_import.rst:123
msgid ""
"You need to be careful here and not name the file ``random.py``. If you do "
"Python will have problem with importing ``random`` module, as it will try to"
" import our file instead of the one included with Python."
msgstr ""

#: ../../source/python_import.rst:127
msgid "Lets finish our lottery example by adding user input::"
msgstr ""

#: ../../source/python_import.rst:140
msgid "Packages"
msgstr ""

#: ../../source/python_import.rst:142
msgid ""
"So we have learned how to organize our code into multiple files. As our "
"program gets bigger we can split it into multiple modules. As time goes by "
"we will have more and more files. In order to deal with this we can put "
"files (modules) in a directory."
msgstr ""

#: ../../source/python_import.rst:146
msgid "Lets consider following file structure::"
msgstr ""

#: ../../source/python_import.rst:160
msgid ""
"So we have two directories: ``trees`` and ``sequence`` that contain some "
"modules (.py files). These directories are called `packages`. In order for a"
" directory to be a package, it has to contain ``__init__.py`` file (it can "
"be empty). This way Python can distinguish packages from other directories."
msgstr ""

#: ../../source/python_import.rst:165
msgid ""
"If we want to import something from a package we can use the same ``import``"
" keyword as before::"
msgstr ""

#: ../../source/python_import.rst:172
msgid ""
"As you can see, we have to use ``.`` to indicate that we want to import "
"``xmas`` module from ``trees`` package. In order to use functions from this "
"module we need to write whole package and module name before function name: "
"``tree.xmas.print_tree``. This is because ``tree`` package and ``xmas`` "
"module are also objects just like any other object in python and we can use "
"them in the same way."
msgstr ""

#: ../../source/python_import.rst:178
msgid ""
"Packages can be nested in each other, but remember, there have to be "
"``__init__.py`` file on each level. Using packages and modules we can create"
" most complex applications."
msgstr ""

#: ../../source/python_import.rst:183
msgid "Exercises"
msgstr ""

#: ../../source/python_import.rst:186
msgid "Task 1: Game randomness"
msgstr ""

#: ../../source/python_import.rst:187 ../../source/python_import.rst:222
msgid "Description:"
msgstr ""

#: ../../source/python_import.rst:189
msgid ""
"Using the code from task Game of ‘rock-paper-scissors’ modify it so that "
"computer's choice would be picked using `random` module."
msgstr ""

#: ../../source/python_import.rst:193
msgid "**Hint:**"
msgstr ""

#: ../../source/python_import.rst:195
msgid "We will use tuples that can store data sequence e.g.:"
msgstr ""

#: ../../source/python_import.rst:204
msgid "In tuple we will store ‘paper’, ‘scissors’, ‘rock’."
msgstr ""

#: ../../source/python_import.rst:206 ../../source/python_import.rst:227
msgid "Explore:"
msgstr ""

#: ../../source/python_import.rst:208
msgid ""
"Make computers choice a little bit less inteligent and bias the probability "
"of picking towards one particular option in proportion 50% / 25% / 25%"
msgstr ""

#: ../../source/python_import.rst:210
msgid ""
"Make computers choice a little bit less inteligent just like previously, but"
" make this favored option also beeing picked randomly for every single round"
" e.g.:"
msgstr ""

#: ../../source/python_import.rst:213
msgid ""
"In first run computer can pick with such probability: stone 50%, paper 25%, "
"scissors 25%."
msgstr ""

#: ../../source/python_import.rst:214
msgid ""
"In next run computer can pick with such probability: stone 25%, paper 50%, "
"scissors 25%."
msgstr ""

#: ../../source/python_import.rst:216
msgid ""
"**Notice:** examples do not have priority settled - they should be random! "
"Hint: you should draw id of a favored element (the one with 50% "
"probability)."
msgstr ""

#: ../../source/python_import.rst:220
msgid "Task 2. Adding menu to the game"
msgstr ""

#: ../../source/python_import.rst:224
msgid ""
"At this point our game accepts any input given by the user as it was always "
"correct. Let's modify that so input would be verified and an error would "
"occur in case of incorrect input."
msgstr ""

#: ../../source/python_import.rst:229
msgid ""
"Instead of accepting written input make menu with predefined choices, i.e.:"
msgstr ""

#: ../../source/python_import.rst:247
msgid ""
"that will define if the computer is smart (33%/33%/33%) or less smart "
"(50%/25%/25%)."
msgstr ""

#: ../../source/python_import.rst:250
msgid "Task 3. Lotto"
msgstr ""

#: ../../source/python_import.rst:252
msgid ""
"Write program ``lotto.py`` that asks user to give 6 numbers from 1-49, then "
"selects 6 numbers from 1-49 by random and tell user if he won or not."
msgstr ""
