#
msgid ""
msgstr ""
"Project-Id-Version: Django Carrots 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-11-23 21:43+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/python_xmas_tree.rst:3
msgid "Christmas Tree"
msgstr ""

#: ../../source/python_xmas_tree.rst:5
msgid ""
"Christmas are coming, Christmas presents time and, at least for Christmas "
"trees :) in every shopping center. As an exercise, we will try to draw a "
"tree in the console."
msgstr ""

#: ../../source/python_xmas_tree.rst:8
msgid ""
"We are going to start from the most basic version of this exercise so that "
"we can later extend it to a more functional version. As an incentive, let’s "
"make a half of the Christmas tree:"
msgstr ""

#: ../../source/python_xmas_tree.rst:42
msgid ""
"It doesn’t look bad, but we have had to do a lot of typing. What if we would"
" like to have a smaller tree? Or a bigger one, composed of hundreds of "
"elements to be printed on a page size A0? Definitely too much typing, even "
"if we would do it by multiplying strings  (``\"*\" * 100``, and so on.). "
"Obviously it is such a repetitive activity that the program can do it for "
"us."
msgstr ""

#: ../../source/python_xmas_tree.rst:50
msgid "Lists and the ``for`` loop"
msgstr ""

#: ../../source/python_xmas_tree.rst:52
msgid ""
"Loops will serve us to deal with such repetitive actions. Staying in the "
"Christmas atmosphere, imagine for a moment that we are the Santa Claus and "
"we have to deliver Christmas gifts to everyone."
msgstr ""

#: ../../source/python_xmas_tree.rst:55
msgid ""
"As you know, Santa has a list of people who deserve gifts. The simplest "
"approach to guarantee that no one is omitted, will be to check sequentially "
"the list and deliver their gifts to one after another. Aside from the "
"physical aspects of the task [#speed]_, the procedure of delivering the "
"gifts could look like this::"
msgstr ""

#: ../../source/python_xmas_tree.rst:65
msgid ""
"Formatting of text above is not accidental. This is actually a disguised "
"program in Python::"
msgstr ""

#: ../../source/python_xmas_tree.rst:74
msgid ""
"Most of the things should look familiar to you. We are calling here two "
"functions: :func:`people_who_deserve_gifts` and :func:`deliver_gift` - their"
" inner workings are only known by Santa Claus. The result of the first one "
"can be named `gift_list`, so that we could refer to this value later ( the "
"same as described above)."
msgstr ""

#: ../../source/python_xmas_tree.rst:79
msgid "A new element is a loop itself, which consists of:"
msgstr ""

#: ../../source/python_xmas_tree.rst:81
msgid "the word :keyword:`for`,"
msgstr ""

#: ../../source/python_xmas_tree.rst:82
msgid "names we want to give to the next elements,"
msgstr ""

#: ../../source/python_xmas_tree.rst:83
msgid "the word :keyword:`in`,"
msgstr ""

#: ../../source/python_xmas_tree.rst:84
msgid "the value of a list or the name that refers to it."
msgstr ""

#: ../../source/python_xmas_tree.rst:85
msgid ""
"the content indented of one level (the same way as in the case of "
":keyword:`if`)."
msgstr ""

#: ../../source/python_xmas_tree.rst:87
msgid ""
"Still we haven’t said anything about lists, as they do not differ much from "
"the intuitive concept of lists in the everyday life. We can easily think of "
"lists in Python as we think of any other list (a shopping list, a guest "
"list, exam results etc.) written on a paper and numbered."
msgstr ""

#: ../../source/python_xmas_tree.rst:91
msgid "Let's start with a blank page by starting a new python interpreter:"
msgstr ""

#: ../../source/python_xmas_tree.rst:97
msgid ""
"At any time we can check how many items we have saved on our list by using "
"the function :func:`len`."
msgstr ""

#: ../../source/python_xmas_tree.rst:102
msgid ""
"Let's make another list (which can have the same name or a different one):"
msgstr ""

#: ../../source/python_xmas_tree.rst:108
msgid ""
"As in the case of tuples, consecutive elements of the list are separated by "
"commas. Unlike tuples, brackets ``[`` and ``]`` are obligatory."
msgstr ""

#: ../../source/python_xmas_tree.rst:111
msgid ""
"To preview a particular position of an element on the list (remember that we"
" count the positions from 0 ):"
msgstr ""

#: ../../source/python_xmas_tree.rst:124
msgid ""
"We can also use the loop :keyword:`for`,to execute instructions for every "
"element of the list:"
msgstr ""

#: ../../source/python_xmas_tree.rst:133
msgid ""
"In the same way, we can print the first part of our half of the Christmas "
"tree:"
msgstr ""

#: ../../source/python_xmas_tree.rst:143
msgid ""
"Well, unfortunately we still have to type the entire contents of the list. "
"This problem can be solved by the function :func:`range`. Check "
"``help(range)`` for the full story, or check these quick examples:"
msgstr ""

#: ../../source/python_xmas_tree.rst:169
msgid ""
"The :func:`range` function has three forms. The most basic and most used one"
" creates a sequence from 0 to the given number. The other forms allow you to"
" specify the start of the range and a step. The created sequence never "
"includes the end of the specified range."
msgstr ""

#: ../../source/python_xmas_tree.rst:174
msgid "Then let’s print a larger Christmas tree:"
msgstr ""

#: ../../source/python_xmas_tree.rst:192
msgid ""
":func:`range` has saved a lot of our time. We can save even more if we omit "
"naming the list:"
msgstr ""

#: ../../source/python_xmas_tree.rst:201
msgid ""
"When you use the keyword :keyword:`for`, we do not have to use the "
":func:`list`. :keyword:`for` can handle the generator given by `range`. "
"Hence, we can simplify our program even more:"
msgstr ""

#: ../../source/python_xmas_tree.rst:214
msgid ""
"Nothing prevents us to put one loop inside another loop, so let's do it! "
"Just remember to use appropriate indentations and use different names e.g. "
"``i`` and ``j`` (or more associated with the list content):"
msgstr ""

#: ../../source/python_xmas_tree.rst:231
msgid "Using this technique, we can repeat our piece of the Christmas tree:"
msgstr ""

#: ../../source/python_xmas_tree.rst:246
msgid ""
"Before proceeding to the next chapter, create ``xmas.py`` file with this "
"program and try to modify it so that each of the three repetitions of the "
"first (external) loop, the second one was executed one more time. This way, "
"we should get our half of the Christmas tree described at the beginning of "
"the chapter."
msgstr ""

#: ../../source/python_xmas_tree.rst:253
msgid "Defining a function"
msgstr ""

#: ../../source/python_xmas_tree.rst:255
msgid ""
"We have already seen how functions solve many of our problems. However, they"
" do not solve all our problems – or at least not exactly the way we would "
"like functions to solve them. Sometimes we must solve a problem on our own. "
"If it occurs often in our program, it would be nice to have a function that "
"solves it for us."
msgstr ""

#: ../../source/python_xmas_tree.rst:260
msgid "We can do it like this in Python:"
msgstr ""

#: ../../source/python_xmas_tree.rst:277
msgid "Let's have a closer look at the function :func:`print_triangle`::"
msgstr ""

#: ../../source/python_xmas_tree.rst:283
msgid ""
"The definition of a function always starts with the word :keyword:`def`. "
"Next, we give the name to our function. Between the parenthesizes, we "
"indicate what names should be given to its arguments when the function is "
"called. In the following lines we provide instructions to be executed when "
"we use the function."
msgstr ""

#: ../../source/python_xmas_tree.rst:288
msgid ""
"As shown in the example, the instructions in the function may include names "
"that we have given as the names of the arguments. The principle of operation"
" is as follows - if you create a function with three arguments:"
msgstr ""

#: ../../source/python_xmas_tree.rst:295
msgid ""
"When you call this new function, you need to specify a value for each "
"argument. This just like all the functions we called before:"
msgstr ""

#: ../../source/python_xmas_tree.rst:304
msgid ""
"Note that the argument name is just a label. If we change the value attached"
" to a label for another one, the other labels will not change – the same "
"happens with the arguments:"
msgstr ""

#: ../../source/python_xmas_tree.rst:316
msgid ""
"It is as normal names (variables) we saw before. There are only two "
"differences:"
msgstr ""

#: ../../source/python_xmas_tree.rst:318
msgid ""
"Firstly, argument names of a function are defined at each function call, and"
" Python attaches the corresponding argument value to to each of the argument"
" names it just created."
msgstr ""

#: ../../source/python_xmas_tree.rst:321
msgid ""
"Secondly, the argument names are not available outside the function as they "
"are created when the function is called and forgotten after the call. That "
"is, if you try now to access the argument name ``n`` we defined in our "
":func:`plus_five` function outside of the function's code, Python tells you "
"it is not defined:"
msgstr ""

#: ../../source/python_xmas_tree.rst:344
msgid ""
"That is, our prim and proper Python cleans up his room at the end of a "
"function call :)"
msgstr ""

#: ../../source/python_xmas_tree.rst:348
msgid "Returning values"
msgstr ""

#: ../../source/python_xmas_tree.rst:350
msgid ""
"The functions which we have previously used had one important property that "
"is missing in the functions created by ourselves - they gave back the value "
"they computed instead of printing it immediately. To achieve the same "
"effect, you need to use the instruction :keyword:`return`. This is a special"
" instruction that can be found only in functions."
msgstr ""

#: ../../source/python_xmas_tree.rst:357
msgid ""
"We can now improve our BMI calculator by adding a function to compute BMI::"
msgstr ""

#: ../../source/python_xmas_tree.rst:362
msgid ""
"Finally, as a last example on functions, here is a solution to the problem "
"from the end of the previous chapter:"
msgstr ""

#: ../../source/python_xmas_tree.rst:391
msgid "The Entire Christmas tree"
msgstr ""

#: ../../source/python_xmas_tree.rst:393
msgid ""
"The previous chapter was fairly theoretical, so now we'll use some of this "
"new knowledge to complete our program to display a Christmas tree."
msgstr ""

#: ../../source/python_xmas_tree.rst:396
msgid "For the record::"
msgstr ""

#: ../../source/python_xmas_tree.rst:407
msgid ""
"How can we improve the function :func:`print_triangle`, o display the entire"
" segment of the Christmas tree, not just half of it?"
msgstr ""

#: ../../source/python_xmas_tree.rst:420
msgid ""
"It is worth noting that each line consists of two asterix more than the "
"previous one. So we can use the third argument :func:`range`:"
msgstr ""

#: ../../source/python_xmas_tree.rst:437
msgid ""
"It is not exactly what we have wanted, as it should be aligned in the "
"centre. The method/function :func:`unicode.center` mentioned in the previous"
" section, helps us:"
msgstr ""

#: ../../source/python_xmas_tree.rst:456
msgid "However, a new problem appears:"
msgstr ""

#: ../../source/python_xmas_tree.rst:480
msgid ""
"If we know in advance, what size the widest segment is, we can add an "
"additional argument to :func:`print_segment`,  to align to the width. "
"Combining all of the knowledge we have acquired up to the moment:"
msgstr ""

#: ../../source/python_xmas_tree.rst:520
msgid "Task for volunteers"
msgstr ""

#: ../../source/python_xmas_tree.rst:522
msgid ""
"Create a class ``XMASTree`` which for a given size and upon calling the "
"method ``draw`` will print the following pictures (sizes 1, 2 and 3):"
msgstr ""

#: ../../source/python_xmas_tree.rst:559
msgid "Notes"
msgstr ""

#: ../../source/python_xmas_tree.rst:560
msgid ""
"Assuming you have 24 hours to deliver one gift for everyone in the world, "
"for one gift you have about 10 microseconds."
msgstr ""

#: ../../source/python_xmas_tree.rst:159
msgid ""
"The :func:`range` function does not directly create a list, but it returns a"
" generator. Generators generate the elements of a sequence one at a time, "
"thereby avoiding to store the full sequence in memory. In order to obtain a "
"list of the sequence, we use the function :func:`list`. If we skip "
":func:`list` call, the result will look like this:"
msgstr ""

#: ../../source/python_xmas_tree.rst:227
msgid ""
"Here we have inner loop that iterates from 11 to 13 (remember, 14 is not "
"included when using ``range``) and outer loop that iterates from 1 to 2. As "
"you can see, items from inner loop are printed twice, for each iteration of "
"outer loop."
msgstr ""

#: ../../source/python_xmas_tree.rst:411
msgid ""
"First of all, let’s determine how we want our result to look like for the "
"exact value of argument  ``n``. It seems to make sense that, ``n`` would be "
"the width. Then for ``n = 5``, we would expect:"
msgstr ""

#: ../../source/python_xmas_tree.rst:565
msgid "Calendar"
msgstr ""

#: ../../source/python_xmas_tree.rst:567 ../../source/python_xmas_tree.rst:637
#: ../../source/python_xmas_tree.rst:661 ../../source/python_xmas_tree.rst:702
#: ../../source/python_xmas_tree.rst:723
msgid "Description:"
msgstr ""

#: ../../source/python_xmas_tree.rst:569
msgid "Using data:"
msgstr ""

#: ../../source/python_xmas_tree.rst:589
msgid "Print a calendar:"
msgstr ""

#: ../../source/python_xmas_tree.rst:626
msgid ""
"Hint: Start with a method that will print days of a single month. Run it for"
" each element of the list ‘data’. Rememeber that every week has 7 days."
msgstr ""

#: ../../source/python_xmas_tree.rst:631
msgid "Improvement of the ‘rock-paper-scissors’ game"
msgstr ""

#: ../../source/python_xmas_tree.rst:635
msgid "Task 1: Let's play some more, i.e. few rounds of a game"
msgstr ""

#: ../../source/python_xmas_tree.rst:639
msgid ""
"Our game is not the most playable at this point, because it has to be reload"
" every single time. We have to give user a choice if he wants to continue or"
" end the game after one round. Let's use a `while` loop and keyword `break`."
msgstr ""

#: ../../source/python_xmas_tree.rst:642
msgid "After every round user should see the question:"
msgstr ""

#: ../../source/python_xmas_tree.rst:649
msgid ""
"The computer can also be stubborn. If user decides no in previous step, make"
" it ask user addition question:"
msgstr ""

#: ../../source/python_xmas_tree.rst:655
msgid "And start next round. (but without a choice of difficulty level!)"
msgstr ""

#: ../../source/python_xmas_tree.rst:659
msgid "Task 2: Some addiotional screens"
msgstr ""

#: ../../source/python_xmas_tree.rst:663
msgid "Adjust the game so it has such `screens`:"
msgstr ""

#: ../../source/python_xmas_tree.rst:665
msgid "Welcome screen:"
msgstr ""

#: ../../source/python_xmas_tree.rst:674
msgid "Level selection:"
msgstr ""

#: ../../source/python_xmas_tree.rst:682
msgid "Game:"
msgstr ""

#: ../../source/python_xmas_tree.rst:691
msgid "End of game:"
msgstr ""

#: ../../source/python_xmas_tree.rst:697
msgid "Take under consideration all previously implemented functionality."
msgstr ""

#: ../../source/python_xmas_tree.rst:700
msgid "Task 3: User stats"
msgstr ""

#: ../../source/python_xmas_tree.rst:704
msgid ""
"It is time to collect some statistical data from wins and fails. At the end "
"of the game (after all rounds) print the number of players and computers "
"wins and who is the winner."
msgstr ""

#: ../../source/python_xmas_tree.rst:707
msgid "Explore:"
msgstr ""

#: ../../source/python_xmas_tree.rst:709
msgid "Count and print percentage values."
msgstr ""

#: ../../source/python_xmas_tree.rst:711
msgid "Print the longest wins sequence both for user and computer."
msgstr ""

#: ../../source/python_xmas_tree.rst:713
msgid "Collect more data for statistical analysis using lists."
msgstr ""

#: ../../source/python_xmas_tree.rst:715
msgid "https://docs.python.org/3/tutorial/introduction.html#lists"
msgstr ""

#: ../../source/python_xmas_tree.rst:716
msgid "https://docs.python.org/3/tutorial/datastructures.html#more-on-lists"
msgstr ""

#: ../../source/python_xmas_tree.rst:718
msgid "Print the longest wins sequence both for user and computer (ad. 2)"
msgstr ""

#: ../../source/python_xmas_tree.rst:721
msgid "Additional task: noughts and crosses"
msgstr ""

#: ../../source/python_xmas_tree.rst:725
msgid ""
"Implement the game of noughts and crosses for two players. Start with the "
"most important part: gameplay, next add menu, players names etc."
msgstr ""

#: ../../source/python_xmas_tree.rst:728
msgid "An exemplary game can look like this:"
msgstr ""
